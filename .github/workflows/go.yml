name: Build and Test
on: [push, pull_request]
jobs:

  build:
    name: Build/Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.15.15, 1.19.3]
        os: [macos-latest, ubuntu-latest, windows-latest]
        exclude:
            - os: macos-latest
              go-version: 1.15.15
            - os: windows-latest
              go-version: 1.15.15
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
      with:
        # Checkout head of the branch of the PR, or the exact revision
        # specified for non-PR builds.
        ref: "${{ github.event.pull_request.head.sha || github.sha }}"

    - name: Build
      run: go build -v ./...

    - name: Build JS/Wasm
      run: env GOOS=js GOARCH=wasm go build -o ../../dist/wormhole.wasm ./wasm/module

    - name: Test
      run: go test -v ./... --timeout 90s

    - name: Meta Tests
      run: go test -v -tags ci ./ci --timeout 90s
      if: ${{ runner.os == 'Linux' }}

    - name: Cross test for i386
      run: env GOOS=linux GOARCH=386 go test -v ./... --timeout 90s
      if: ${{ runner.os == 'Linux' }}
    
    - name: Cross compile for arm (RPI)
      run: env GOOS=linux GOARCH=arm GOARM=5 go build -v ./...
      if: ${{ runner.os == 'Linux' }}

    - name: Build for MacOS as shared library amd64 
      run: env CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -buildmode=c-shared  -v -o libwormhole_william.dylib ./c/
      if: ${{ runner.os == 'macOS' }}
      
      # using amd64 as Github Runners as go fails to build for arm64 iOS
    - name: Build for iOS as static library amd64 
      run: env CGO_ENABLED=1 GOOS=ios GOARCH=amd64 go build -buildmode=c-archive  -v -o libwormhole_william.a ./c/
      if: ${{ runner.os == 'macOS' }}
