name: Build & Test
on: [push, pull_request]
jobs:

  build:
    name: Build & Test Go
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.16.15, 1.19.3]
        os: [macos-latest, ubuntu-latest, windows-latest]
        exclude:
            - os: macos-latest
              go-version: 1.16.15
            - os: windows-latest
              go-version: 1.16.15
    steps:
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
      with:
        # Checkout head of the branch of the PR, or the exact revision
        # specified for non-PR builds.
        ref: "${{ github.event.pull_request.head.sha || github.sha }}"

    - name: Build
      run: go build -v ./...

    - name: Build JS/Wasm
      run: env GOOS=js GOARCH=wasm go build -o ../../dist/wormhole.wasm ./wasm/module
    
    - name: Build for Linux Arm (RPI)
      run: env GOOS=linux GOARCH=arm GOARM=5 go build -v ./...
      if: ${{ runner.os == 'Linux' }}

    - name: Build for Android Arm64 (RPI)
      run: env GOOS=android GOARCH=arm64 GOARM=5 go build -v ./...
      if: ${{ runner.os == 'Linux' }}

    - name: Build for Windows i386 (RPI)
      run: env GOOS=windows GOARCH=386 go build -v ./...
      if: ${{ runner.os == 'Windows' }}

    - name: Build for Macos as shared library Amd64 
      run: env GOOS=darwin GOARCH=amd64 go build -buildmode=c-shared  -v ./...
      if: ${{ runner.os == 'Linux' }}

    - name: Tests
      run: go test -v ./... --timeout 60s

    - name: Meta Tests
      run: go test -v -tags ci ./ci --timeout 60s
      if: ${{ runner.os == 'Linux' }}

    - name: Cross Tests for i386
      run: env GOOS=linux GOARCH=386 go test -v ./... --timeout 60s
      if: ${{ runner.os == 'Linux' }}

   
